{
  "_args": [
    [
      {
        "raw": "ios-deploy@^1.9.0",
        "scope": null,
        "escapedName": "ios-deploy",
        "name": "ios-deploy",
        "rawSpec": "^1.9.0",
        "spec": ">=1.9.0 <2.0.0",
        "type": "range"
      },
      "/Users/huangwei/Documents/iOS Development/GitHub/Weex/weexPro"
    ]
  ],
  "_cnpm_publish_time": 1504602422022,
  "_from": "ios-deploy@^1.9.0",
  "_hasShrinkwrap": false,
  "_id": "ios-deploy@1.9.2",
  "_location": "/ios-deploy",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ios-deploy-1.9.2.tgz_1504602421879_0.1965430632699281"
  },
  "_npmUser": {
    "name": "shazron",
    "email": "shazron@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ios-deploy@^1.9.0",
    "scope": null,
    "escapedName": "ios-deploy",
    "name": "ios-deploy",
    "rawSpec": "^1.9.0",
    "spec": ">=1.9.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/ios-deploy/download/ios-deploy-1.9.2.tgz",
  "_shasum": "c2f4c46b06db4771939b29f980c7c1a8906b47a2",
  "_shrinkwrap": null,
  "_spec": "ios-deploy@^1.9.0",
  "_where": "/Users/huangwei/Documents/iOS Development/GitHub/Weex/weexPro",
  "author": {
    "name": "Greg Hughes"
  },
  "bin": {
    "ios-deploy": "./build/Release/ios-deploy"
  },
  "bugs": {
    "url": "https://github.com/phonegap/ios-deploy/issues"
  },
  "dependencies": {},
  "description": "launch iOS apps iOS devices from the command line (Xcode 7)",
  "devDependencies": {
    "jshint": "2.5.8"
  },
  "directories": {},
  "dist": {
    "shasum": "c2f4c46b06db4771939b29f980c7c1a8906b47a2",
    "size": 42249,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/ios-deploy/download/ios-deploy-1.9.2.tgz"
  },
  "gitHead": "9667eca85e824a97e50dc34c388bcdc393ed85f9",
  "homepage": "https://github.com/phonegap/ios-deploy#readme",
  "keywords": [
    "ios-deploy",
    "deploy to iOS device"
  ],
  "license": "GPLv3",
  "main": "ios-deploy",
  "maintainers": [
    {
      "name": "macdonst",
      "email": "simon.macdonald@gmail.com"
    },
    {
      "name": "purplecabbage",
      "email": "purplecabbage@gmail.com"
    },
    {
      "name": "shazron",
      "email": "shazron@gmail.com"
    },
    {
      "name": "stevegill",
      "email": "stevengill97@gmail.com"
    }
  ],
  "name": "ios-deploy",
  "optionalDependencies": {},
  "os": [
    "darwin"
  ],
  "publish_time": 1504602422022,
  "readme": "[![Build Status](https://travis-ci.org/phonegap/ios-deploy.svg?branch=master)](https://travis-ci.org/phonegap/ios-deploy)\n\nios-deploy\n==========\nInstall and debug iOS apps without using Xcode. Designed to work on un-jailbroken devices.\n\n## Requirements\n\n* Mac OS X. Tested on 10.11 El Capitan, 10.12 Sierra, iOS 9.0 and iOS 10.0\n* You need to have a valid iOS Development certificate installed.\n* Xcode 7 or greater should be installed (**NOT** Command Line Tools!)\n\n## Roadmap\n\nSee our [milestones](https://github.com/phonegap/ios-deploy/milestones).\n\nSignificant changes: \n\n    1.8.0 will use an Xcode project instead of a Makefile (to prepare for 2.0.0) (1.x branch)\n    2.0.0 will break out the commands into their own files, and create ios-deploy-lib for node.js use (master branch)\n\t\n## Development\n\nThe legacy `1.x` version is under the `1.x` branch. Bug fixes for the `1.x` series will occur under there.\nThe 'master' branch now contains the `2.x` series, and is the development branch. \t\n\n## Installation\n=======\n\nios-deploy installation is made simple using the node.js package manager.  If you use [Homebrew](http://brew.sh/), install [node.js](https://nodejs.org):\n\n```\nbrew install node\n```\n\nNow install ios-deploy with the [node.js](https://nodejs.org) package manager:\n\n```\nnpm install -g ios-deploy\n```\n\nTo build from source:\n\n```\nxcodebuild\n```\n\nThis will build `ios-deploy` into the `build/Release` folder.\n\n## Testing\n\nRun:\n\n```\nnpm install && npm test\n```\n\n### OS X 10.11 El Capitan or greater\n\nIf you are *not* using a node version manager like [nvm](https://github.com/creationix/nvm) or [n](https://github.com/tj/n), you may have to do either of these three things below when under El Capitan:\n\n1. Add the `--unsafe-perm=true` flag  when installing ios-deploy\n2. Add the `--allow-root` flag  when installing ios-deploy\n3. Ensure the `nobody` user has write access to `/usr/local/lib/node_modules/ios-deploy/ios-deploy`\n\n## Usage\n\n    Usage: ios-deploy [OPTION]...\n        -d, --debug                  launch the app in lldb after installation\n        -i, --id <device_id>         the id of the device to connect to\n        -c, --detect                 only detect if the device is connected\n        -b, --bundle <bundle.app>    the path to the app bundle to be installed\n        -a, --args <args>            command line arguments to pass to the app when launching it\n        -t, --timeout <timeout>      number of seconds to wait for a device to be connected\n        -u, --unbuffered             don't buffer stdout\n        -n, --nostart                do not start the app when debugging\n        -N, --nolldb                 start debugserver only. do not run lldb\n        -I, --noninteractive         start in non interactive mode (quit when app crashes or exits)\n        -L, --justlaunch             just launch the app and exit lldb\n        -v, --verbose                enable verbose output\n        -m, --noinstall              directly start debugging without app install (-d not required)\n        -p, --port <number>          port used for device, default: dynamic\n        -r, --uninstall              uninstall the app before install (do not use with -m; app cache and data are cleared) \n        -9, --uninstall_only         uninstall the app ONLY. Use only with -1 <bundle_id> \n        -1, --bundle_id <bundle id>  specify bundle id for list and upload\n        -l, --list                   list files\n        -o, --upload <file>          upload file\n        -w, --download               download app tree\n        -2, --to <target pathname>   use together with up/download file/tree. specify target\n        -D, --mkdir <dir>            make directory on device\n        -R, --rm <path>              remove file or directory on device (directories must be empty)\n        -V, --version                print the executable version \n        -e, --exists                 check if the app with given bundle_id is installed or not \n        -B, --list_bundle_id         list bundle_id \n        -W, --no-wifi                ignore wifi devices\n        --detect_deadlocks <sec>     start printing backtraces for all threads periodically after specific amount of seconds\n\n## Examples\n\nThe commands below assume that you have an app called `my.app` with bundle id `bundle.id`. Substitute where necessary.\n\n    // deploy and debug your app to a connected device\n    ios-deploy --debug --bundle my.app\n\n    // deploy and debug your app to a connected device, skipping any wi-fi connection (use USB)\n    ios-deploy --debug --bundle my.app --no-wifi\n\n    // deploy and launch your app to a connected device, but quit the debugger after\n    ios-deploy --justlaunch --debug --bundle my.app\n\n    // deploy and launch your app to a connected device, quit when app crashes or exits\n    ios-deploy --noninteractive --debug --bundle my.app\n\n    // Debug your pre-installed app with an external debugger (e.g. lldb or IDA Pro)\n    ios-deploy --noinstall --nolldb --port 6666 --bundle my.app\n\n    // Upload a file to your app's Documents folder\n    ios-deploy --bundle_id 'bundle.id' --upload test.txt --to Documents/test.txt\n\n    // Download your app's Documents, Library and tmp folders\n    ios-deploy --bundle_id 'bundle.id' --download --to MyDestinationFolder\n\n    // List the contents of your app's Documents, Library and tmp folders\n    ios-deploy --bundle_id 'bundle.id' --list\n\n    // deploy and debug your app to a connected device, uninstall the app first\n    ios-deploy --uninstall --debug --bundle my.app\n\n    // check whether an app by bundle id exists on the device (check return code `echo $?`)\n    ios-deploy --exists --bundle_id com.apple.mobilemail\n\n    // Download the Documents directory of the app *only*\n    ios-deploy --download=/Documents --bundle_id my.app.id --to ./my_download_location\n    \n    // List ids and names of connected devices\n    ios-deploy -c\n    \n    // Uninstall an app\n    ios-deploy --uninstall_only --bundle_id my.bundle.id\n    \n    // list all bundle ids of all apps on your device\n    ios-deploy --list_bundle_id\n\n## Demo\n\nThe included demo.app represents the minimum required to get code running on iOS.\n\n* `make demo.app` will generate the demo.app executable. If it doesn't compile, modify `IOS_SDK_VERSION` in the Makefile.\n* `make debug` will install demo.app and launch a LLDB session.\n\n## Notes\n* `--detect_deadlocks` can help to identify an exact state of application's threads in case of a deadlock. It works like this: The user specifies the amount of time ios-deploy runs the app as usual. When the timeout is elapsed ios-deploy starts to print call-stacks of all threads every 5 seconds and the app keeps running. Comparing threads' call-stacks between each other helps to identify the threads which were stuck.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/phonegap/ios-deploy.git"
  },
  "scripts": {
    "jshint": "node node_modules/jshint/bin/jshint src/scripts/*.js",
    "preinstall": "./src/scripts/check_reqs.js && xcodebuild",
    "pycompile": "python -m py_compile src/scripts/*.py",
    "test": "npm run pycompile && npm run jshint && xcodebuild -target ios-deploy-lib && xcodebuild test -scheme ios-deploy-tests"
  },
  "version": "1.9.2"
}
