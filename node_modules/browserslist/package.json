{
  "_args": [
    [
      {
        "raw": "browserslist@^3.2.6",
        "scope": null,
        "escapedName": "browserslist",
        "name": "browserslist",
        "rawSpec": "^3.2.6",
        "spec": ">=3.2.6 <4.0.0",
        "type": "range"
      },
      "/Users/huangwei/Documents/iOS Development/GitHub/Weex/weexPro/node_modules/autoprefixer"
    ]
  ],
  "_cnpm_publish_time": 1524706872412,
  "_from": "browserslist@^3.2.6",
  "_hasShrinkwrap": false,
  "_id": "browserslist@3.2.6",
  "_location": "/browserslist",
  "_nodeVersion": "9.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/browserslist_3.2.6_1524706872241_0.41612928314432995"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "browserslist@^3.2.6",
    "scope": null,
    "escapedName": "browserslist",
    "name": "browserslist",
    "rawSpec": "^3.2.6",
    "spec": ">=3.2.6 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/autoprefixer"
  ],
  "_resolved": "http://registry.npm.taobao.org/browserslist/download/browserslist-3.2.6.tgz",
  "_shasum": "138a44d04a9af64443679191d041f28ce5b965d5",
  "_shrinkwrap": null,
  "_spec": "browserslist@^3.2.6",
  "_where": "/Users/huangwei/Documents/iOS Development/GitHub/Weex/weexPro/node_modules/autoprefixer",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bin": {
    "browserslist": "./cli.js"
  },
  "browser": {
    "./node.js": "./browser.js",
    "path": false
  },
  "bugs": {
    "url": "https://github.com/browserslist/browserslist/issues"
  },
  "dependencies": {
    "caniuse-lite": "^1.0.30000830",
    "electron-to-chromium": "^1.3.42"
  },
  "description": "Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset",
  "devDependencies": {
    "cross-spawn": "^6.0.5",
    "eslint": "^4.19.1",
    "eslint-ci": "^0.1.1",
    "eslint-config-logux": "^21.0.0",
    "eslint-config-standard": "^11.0.0",
    "eslint-plugin-es5": "^1.3.1",
    "eslint-plugin-import": "^2.11.0",
    "eslint-plugin-jest": "^21.15.1",
    "eslint-plugin-node": "^6.0.1",
    "eslint-plugin-promise": "^3.7.0",
    "eslint-plugin-security": "^1.4.0",
    "eslint-plugin-standard": "^3.1.0",
    "fs-extra": "^5.0.0",
    "jest": "^22.4.3",
    "lint-staged": "^7.0.4",
    "pre-commit": "^1.1.3",
    "size-limit": "^0.17.0",
    "yaspeller-ci": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "138a44d04a9af64443679191d041f28ce5b965d5",
    "size": 16580,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/browserslist/download/browserslist-3.2.6.tgz"
  },
  "eslintConfig": {
    "extends": "eslint-config-logux/browser",
    "rules": {
      "security/detect-unsafe-regex": "off",
      "global-require": "off"
    },
    "overrides": {
      "files": [
        "*.test.js"
      ],
      "rules": {
        "es5/no-arrow-functions": "off"
      }
    }
  },
  "gitHead": "0778987a0b3fc25948d1267d09b2f2322d704fb7",
  "homepage": "https://github.com/browserslist/browserslist#readme",
  "jest": {
    "testEnvironment": "node",
    "coverageThreshold": {
      "global": {
        "statements": 100
      }
    },
    "modulePathIgnorePatterns": [
      "<rootDir>/test/fixtures"
    ]
  },
  "keywords": [
    "caniuse",
    "browsers",
    "target"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.md": "yaspeller-ci",
    "*.js": "eslint"
  },
  "maintainers": [
    {
      "name": "11bit",
      "email": "buryak.ivan@yandex.ru"
    },
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "browserslist",
  "optionalDependencies": {},
  "pre-commit": [
    "lint-staged"
  ],
  "publish_time": 1524706872412,
  "readme": "# Browserslist [![Cult Of Martians][cult-img]][cult]\n\n<img align=\"right\" width=\"120\" height=\"120\"\n     src=\"./logo.svg\" alt=\"Browserslist logo by Anton Lovchikov\">\n\nLibrary to share target browsers between different front-end tools.\nIt is used in:\n\n* [Autoprefixer]\n* [babel-preset-env]\n  (external config in `package.json` or `browserslist` will be supported in 7.0)\n* [postcss-preset-env]\n* [eslint-plugin-compat]\n* [stylelint-no-unsupported-browser-features]\n* [postcss-normalize]\n\n[Browserslist Example] shows how every tool uses Browserslist.\nAll tools will find target browsers automatically,\nwhen you add the following to `package.json`:\n\n```json\n{\n  \"browserslist\": [\n    \"> 1%\",\n    \"IE 10\"\n  ]\n}\n```\n\nOr in `.browserslistrc` config:\n\n```yaml\n# Browsers that we support\n\n> 1%\nIE 10 # sorry\n```\n\nDevelopers set browsers list in queries like `last 2 version`\nto be free from updating browser versions manually.\nBrowserslist will use [Can I Use] data for this queries.\n\nBrowserslist will take browsers queries from tool option,\n`browserslist` config, `.browserslistrc` config,\n`browserslist` section in `package.json` or environment variables.\n\nYou can test Browserslist queries in [online demo].\n\n[cult-img]: http://cultofmartians.com/assets/badges/badge.svg\n[cult]: http://cultofmartians.com/done.html\n\n<a href=\"https://evilmartians.com/?utm_source=browserslist\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[stylelint-no-unsupported-browser-features]: https://github.com/ismay/stylelint-no-unsupported-browser-features\n[eslint-plugin-compat]:                      https://github.com/amilajack/eslint-plugin-compat\n[Browserslist Example]:                       https://github.com/browserslist/browserslist-example\n[postcss-preset-env]:                        https://github.com/jonathantneal/postcss-preset-env\n[babel-preset-env]:                          https://github.com/babel/babel/tree/master/packages/babel-preset-env\n[postcss-normalize]:                         https://github.com/jonathantneal/postcss-normalize\n[Autoprefixer]:                              https://github.com/postcss/autoprefixer\n[online demo]:                               http://browserl.ist/\n[Can I Use]:                                 http://caniuse.com/\n\n## Tools\n\n* [`browserslist-ga`] downloads your website browsers statistics\n  to use it in `> 0.5% in my stats` query.\n* [`browserslist-useragent`] checks browser by user agent string\n  to match Browserslist target browsers query.\n* [`caniuse-api`] returns browsers which support some specific feature.\n* Run `npx browserslist` in your project directory to see project’s\n  target browsers. This CLI tool is built-in and available in any project\n  with Autoprefixer.\n\n[`browserslist-useragent`]: https://github.com/pastelsky/browserslist-useragent\n[`browserslist-ga`]:        https://github.com/browserslist/browserslist-ga\n[`caniuse-api`]:            https://github.com/Nyalab/caniuse-api\n\n\n## Queries\n\nBrowserslist will use browsers query from one of this sources:\n\n1. Tool options. For example `browsers` option in Autoprefixer.\n2. `BROWSERSLIST` environment variable.\n3. `browserslist` config file in current or parent directories.\n3. `.browserslistrc` config file in current or parent directories.\n4. `browserslist` key in `package.json` file in current or parent directories.\n   **We recommend this way.**\n5. If the above methods did not produce a valid result\n   Browserslist will use defaults:\n   `> 0.5%, last 2 versions, Firefox ESR, not dead`.\n\n\n### Best Practices\n\n* We do not recommend to changing the default set of browsers unless you\n  know what are you doing. Browserslist’s default browsers selection is a\n  result of many long discussions. It is easy to make mistake selecting own\n  browsers without understanding what are you doing (like accidentally making\n  your website inaccessible for Chinese users).\n* Select browsers directly (`last 2 Chrome versions`) only if you are making\n  web app for kiosk with one browser. There are a lot browsers on the market.\n  If you are making general web app you should respect browsers diversity.\n* If you want to change the default set of browsers we recommend `> 0.2%`,\n  `> 1% in US` or `> 1% in my stats`. `last 2 versions` will add too many\n  dead browsers and will not add many popular versions. If you require last\n  2 versions support, set `last 2 versions, > 1% in my stats, not dead`.\n\n\n### Full List\n\nYou can specify the versions by queries (case insensitive):\n\n* `> 5%`: versions selected by global usage statistics.\n  `>=`, `<` and `<=` work too.\n* `> 5% in US`: uses USA usage statistics. It accepts [two-letter country code].\n* `> 5% in alt-AS`: uses Asia region usage statistics. List of all region codes\n  can be found at [`caniuse-lite/data/regions`].\n* `> 5% in my stats`: uses [custom usage data].\n* `cover 99.5%`: most popular browsers that provide coverage.\n* `cover 99.5% in US`: same as above, with [two-letter country code].\n* `cover 99.5% in my stats`: uses [custom usage data].\n* `extends browserslist-config-mycompany`: take queries from\n  `browserslist-config-mycompany` npm package.\n* `ie 6-8`: selects an inclusive range of versions.\n* `Firefox > 20`: versions of Firefox newer than 20.\n  `>=`, `<` and `<=` work too.\n* `iOS 7`: the iOS browser version 7 directly.\n* `Firefox ESR`: the latest [Firefox ESR] version.\n* `unreleased versions` or `unreleased Chrome versions`:\n  alpha and beta versions.\n* `last 2 major versions` or `last 2 iOS major versions`:\n  all minor/patch releases of last 2 major versions.\n* `since 2015` or `last 2 years`: all versions released since year 2015\n  (also `since 2015-03` and `since 2015-03-10`).\n* `dead`: browsers from `last 2 version` query, but with less than 0.5%\n  in global usage statistics and without official support or updates\n  for 24 months. Right now it is `IE 10`, `IE_Mob 10`, `BlackBerry 10`,\n  `BlackBerry 7`, and `OperaMobile 12.1`.\n* `last 2 versions`: the last 2 versions for *each* browser.\n* `last 2 Chrome versions`: the last 2 versions of Chrome browser.\n* `defaults`: Browserslist’s default browsers\n  (`> 0.5%, last 2 versions, Firefox ESR, not dead`).\n* `not ie <= 8`: exclude browsers selected by previous queries.\n\nYou can add `not ` to any query.\n\n\n### Debug\n\nRun `npx browserslist` in project directory to see what browsers was selected\nby your queries.\n\n```sh\n$ npx browserslist\nand_chr 61\nand_ff 56\nand_qq 1.2\nand_uc 11.4\nandroid 56\nbaidu 7.12\nbb 10\nchrome 62\nedge 16\nfirefox 56\nios_saf 11\nopera 48\nsafari 11\nsamsung 5\n```\n\n\n### Notes\n\nBrowserslist works with separated versions of browsers.\nYou should avoid queries like `Firefox > 0`.\n\nMultiple criteria are combined as a boolean `OR`. A browser version must match\nat least one of the criteria to be selected.\n\nAll queries are based on the [Can I Use] support table,\ne.g. `last 3 iOS versions` might select `8.4, 9.2, 9.3` (mixed major and minor),\nwhereas `last 3 Chrome versions` might select `50, 49, 48` (major only).\n\n[`caniuse-lite/data/regions`]: https://github.com/ben-eb/caniuse-lite/tree/master/data/regions\n[two-letter country code]:     http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n[custom usage data]:           #custom-usage-data\n[Can I Use]:                   http://caniuse.com/\n\n\n### Browsers\n\nNames are case insensitive:\n\n* `Android` for Android WebView.\n* `Baidu` for Baidu Browser.\n* `BlackBerry` or `bb` for Blackberry browser.\n* `Chrome` for Google Chrome.\n* `ChromeAndroid` or `and_chr` for Chrome for Android\n* `Edge` for Microsoft Edge.\n* `Electron` for Electron framework. It will be converted to Chrome version.\n* `Explorer` or `ie` for Internet Explorer.\n* `ExplorerMobile` or `ie_mob` for Internet Explorer Mobile.\n* `Firefox` or `ff` for Mozilla Firefox.\n* `FirefoxAndroid` or `and_ff` for Firefox for Android.\n* `iOS` or `ios_saf` for iOS Safari.\n* `Opera` for Opera.\n* `OperaMini` or `op_mini` for Opera Mini.\n* `OperaMobile` or `op_mob` for Opera Mobile.\n* `QQAndroid` or `and_qq` for QQ Browser for Android.\n* `Safari` for desktop Safari.\n* `Samsung` for Samsung Internet.\n* `UCAndroid` or `and_uc` for UC Browser for Android.\n\n\n## `package.json`\n\nIf you want to reduce config files in project root, you can specify\nbrowsers in `package.json` with `browserslist` key:\n\n```json\n{\n  \"private\": true,\n  \"dependencies\": {\n    \"autoprefixer\": \"^6.5.4\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"IE 10\"\n  ]\n}\n```\n\n\n## Config File\n\nBrowserslist config should be named `.browserslistrc` or `browserslist`\nand have browsers queries split by a new line. Comments starts with `#` symbol:\n\n```yaml\n# Browsers that we support\n\n> 1%\nIE 10 # sorry\n```\n\nBrowserslist will check config in every directory in `path`.\nSo, if tool process `app/styles/main.css`, you can put config to root,\n`app/` or `app/styles`.\n\nYou can specify direct path in `BROWSERSLIST_CONFIG` environment variables.\n\n\n## Shareable Configs\n\nYou can use the following query to reference an exported Browserslist config\nfrom another package:\n\n```json\n  \"browserslist\": [\n    \"extends browserslist-config-mycompany\"\n  ]\n```\n\nFor security reasons, external configuration only supports packages that have\nthe `browserslist-config-` prefix. npm scoped packages are also supported, by\nnaming or prefixing the module with `@scope/browserslist-config`, such as\n`@scope/browserslist-config` or `@scope/browserslist-config-mycompany`.\n\nIf you don’t accept Browserslist queries from users, you can disable the\nvalidation by using the `dangerousExtend` option:\n\n```js\nbrowserslist(queries, { path, dangerousExtend: true })\n```\n\nBecause this uses `npm`'s resolution, you can also reference specific files\nin a package:\n\n```json\n  \"browserslist\": [\n    \"extends browserslist-config-mycompany/desktop\",\n    \"extends browserslist-config-mycompany/mobile\"\n  ]\n```\n\nWhen writing a shared Browserslist package, just export an array.\n`browserslist-config-mycompany/index.js`:\n\n```js\nmodule.exports = [\n  '> 1%',\n  'ie 10'\n]\n```\n\n\n## Environment Variables\n\nIf some tool use Browserslist inside, you can change browsers settings\nby [environment variables]:\n\n* `BROWSERSLIST` with browsers queries.\n\n   ```sh\n  BROWSERSLIST=\"> 5%\" gulp css\n   ```\n\n* `BROWSERSLIST_CONFIG` with path to config file.\n\n   ```sh\n  BROWSERSLIST_CONFIG=./config/browserslist gulp css\n   ```\n\n* `BROWSERSLIST_ENV` with environments string.\n\n   ```sh\n  BROWSERSLIST_ENV=\"development\" gulp css\n   ```\n\n* `BROWSERSLIST_STATS` with path to the custom usage data\n  for `> 1% in my stats` query.\n\n   ```sh\n  BROWSERSLIST_STATS=./config/usage_data.json gulp css\n   ```\n\n* `BROWSERSLIST_DISABLE_CACHE` if you want to disable config reading cache.\n\n   ```sh\n  BROWSERSLIST_DISABLE_CACHE=1 gulp css\n   ```\n\n[environment variables]: https://en.wikipedia.org/wiki/Environment_variable\n\n\n## Environments\n\nYou can also specify different browser queries for various environments.\nBrowserslist will choose query according to `BROWSERSLIST_ENV` or `NODE_ENV`\nvariables. If none of them is declared, Browserslist will firstly look\nfor `production` queries and then use defaults.\n\nIn `package.json`:\n\n```js\n  \"browserslist\": {\n    \"production\": [\n      \"> 1%\",\n      \"ie 10\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\"\n    ]\n  }\n```\n\nIn `.browserslistrc` config:\n\n```ini\n[production staging]\n> 1%\nie 10\n\n[development]\nlast 1 chrome version\nlast 1 firefox version\n```\n\n\n## Custom Usage Data\n\nIf you have a website, you can query against the usage statistics of your site.\n[`browserslist-ga`] will ask access to Google Analytics and then generate\n`browserslist-stats.json`:\n\n```\nnpx browserslist-ga\n```\n\nOf course, you can generate usage statistics file by any other method.\nFile format should be like:\n\n```js\n{\n  \"ie\": {\n    \"6\": 0.01,\n    \"7\": 0.4,\n    \"8\": 1.5\n  },\n  \"chrome\": {\n    …\n  },\n  …\n}\n```\n\nNote that you can query against your custom usage data\nwhile also querying against global or regional data.\nFor example, the query `> 1% in my stats, > 5% in US, 10%` is permitted.\n\n[`browserslist-ga`]: https://github.com/browserslist/browserslist-ga\n[Can I Use]:         http://caniuse.com/\n\n\n## JS API\n\n```js\nvar browserslist = require('browserslist');\n\n// Your CSS/JS build tool code\nvar process = function (source, opts) {\n    var browsers = browserslist(opts.browsers, {\n        stats: opts.stats,\n        path:  opts.file,\n        env:   opts.env\n    });\n    // Your code to add features for selected browsers\n}\n```\n\nQueries can be a string `\"> 1%, IE 10\"`\nor an array `['> 1%', 'IE 10']`.\n\nIf a query is missing, Browserslist will look for a config file.\nYou can provide a `path` option (that can be a file) to find the config file\nrelatively to it.\n\nOptions:\n\n* `path`: file or a directory path to look for config file. Default is `.`.\n* `env`: what environment section use from config. Default is `production`.\n* `stats`: custom usage statistics data.\n* `config`: path to config if you want to set it manually.\n* `ignoreUnknownVersions`: do not throw on direct query (like `ie 12`).\n  Default is `false.`\n* `dangerousExtend`: Disable security checks for `extend` query.\n  Default is `false.`\n\nFor non-JS environment and debug purpose you can use CLI tool:\n\n```sh\nbrowserslist \"> 1%, IE 10\"\n```\n\n\n## Coverage\n\nYou can get total users coverage for selected browsers by JS API:\n\n```js\nbrowserslist.coverage(browserslist('> 1%'))\n//=> 81.4\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in US'), 'US')\n//=> 83.1\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in my stats'), 'my stats')\n//=> 83.1\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in my stats', { stats }), stats)\n//=> 82.2\n```\n\nOr by CLI:\n\n```sh\n$ browserslist --coverage \"> 1%\"\nThese browsers account for 81.4% of all users globally\n```\n\n```sh\n$ browserslist --coverage=US \"> 1% in US\"\nThese browsers account for 83.1% of all users in the US\n```\n\n```sh\n$ browserslist --coverage \"> 1% in my stats\"\nThese browsers account for 83.1% of all users in custom statistics\n```\n\n```sh\n$ browserslist --coverage \"> 1% in my stats\" --stats=./stats.json\nThese browsers account for 83.1% of all users in custom statistics\n```\n\n\n## Cache\n\nBrowserslist caches the configuration it reads from `package.json` and\n`browserslist` files, as well as knowledge about the existence of files,\nfor the duration of the hosting process.\n\nTo clear these caches, use:\n\n```js\nbrowserslist.clearCaches();\n```\n\nTo disable the caching altogether, set the `BROWSERSLIST_DISABLE_CACHE`\nenvironment variable.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/browserslist/browserslist.git"
  },
  "scripts": {
    "lint": "eslint-ci *.js test/*.js benchmark/*.js",
    "lint-staged": "lint-staged",
    "spellcheck": "yaspeller-ci README.md CHANGELOG.md",
    "test": "jest --coverage && yarn lint && yarn spellcheck && size-limit"
  },
  "size-limit": [
    {
      "path": "index.js",
      "limit": "7.2 KB"
    }
  ],
  "version": "3.2.6"
}
